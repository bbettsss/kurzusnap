install.packages("readxl")
library(readxl)
mba <- read_excel("MBA.xlsx")
install.packages("readxl")
library(readxl)
mba <- read_excel("MBA.xlsx")
colnames(house)
str(house)
str(mba)
mba$Gender <- as.factor(mba$Gender)
str(mba)
#Faktor változóknál: table, plot
table(mba$Gender)
plot(mba$Gender)
#sűrjünk egy új adatbázisba a 250 négyzetméterár alatti lakásokat
house_szurt <- house %>%
filter(negyzetmeterar<250)
#sűrjünk egy új adatbázisba a 250 négyzetméterár alatti lakásokat
house_szurt <- house %>%
filter(negyzetmeterar<250)
mba_selected <- mba %>%
select(Gender,Result10)
#sűrjünk egy új adatbázisba a 250 négyzetméterár alatti lakásokat
house_szurt <- house %>%
filter(negyzetmeterar<250)
#sűrjünk egy új adatbázisba a 250 négyzetméterár alatti lakásokat
house_szurt <- house %>%
filter(negyzetmeterar<250)
mba_selected <- mba %>%
select(Gender,Result10)
#rename-nél: új név = régi név
house <- house %>%
rename(negyzetmeter = Square_Footage, ar = House_Price)
#új adatbázisba mentsük ki, hogy nememnként mekkora az átlagos eredmény (result10)
# group_by: csoportosításra jó (nem szerint)
# summarise: a többi
mba_selected <- mba %>%
select(Gender,Result10)
#sűrjünk egy új adatbázisba a 250 négyzetméterár alatti lakásokat
house_szurt <- house %>%
filter(negyzetmeterar<250)
house <- house %>%
mutate(negyzetmeterar = ar/negyzetmeter)
#rename-nél: új név = régi név
house <- house %>%
rename(negyzetmeter = Square_Footage, ar = House_Price)
#Numerikus változóknál: mean, hist
mean(house$House_Price)
meadin(house$House_Price)
#Numerikus változóknál: mean, hist
mean(house$House_Price)
median(house$House_Price)
hist(house$House_PRice)
#Numerikus változóknál: mean, hist
mean(house$House_Price)
median(house$House_Price)
hist(house$House_Price)
#rename-nél: új név = régi név
house <- house %>%
rename(negyzetmeter = Square_Footage, ar = House_Price)
#új adatbázisba mentsük ki, hogy nememnként mekkora az átlagos eredmény (result10)
# group_by: csoportosításra jó (nem szerint)
# summarise: a többi változó összetömmörítése
mba_nemenkent <- mba_selected %>%
group_by(Gender) %>%
summarze(mean(Result10))
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("esquisse")
library(dplyr)
library(ggplot2)
library(esquisse)
print("HelloWorld")
#ez szöveg, ha nincs hashtag akkor kód lesz
setwd("/Users/betts.belenyesi/Documents/Documents - betts’s MacBook Air/rajk/kurzusok/2.félév/ökonometria")
#/-re kell cserélni
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("esquisse")
library(dplyr)
library(ggplot2)
library(esquisse)
print("HelloWorld")
egy <- 1
kettő <- 2
harom <- egy + ketto
#új adatbázisba mentsük ki, hogy nememnként mekkora az átlagos eredmény (result10)
# group_by: csoportosításra jó (nem szerint)
# summarise: a többi változó összetömmörítése
mba_nemenkent <- mba_selected %>%
group_by(Gender) %>%
summarze(mean(Result10))
mba_selected <- mba %>%
select(Gender,Result10)
#új adatbázisba mentsük ki, hogy nememnként mekkora az átlagos eredmény (result10)
# group_by: csoportosításra jó (nem szerint)
# summarise: a többi változó összetömmörítése
mba_nemenkent <- mba_selected %>%
group_by(Gender) %>%
summarze(mean(Result10))
#sűrjünk egy új adatbázisba a 250 négyzetméterár alatti lakásokat
house_szurt <- house %>%
filter(negyzetmeterar<250)
#rename-nél: új név = régi név
house <- house %>%
rename(negyzetmeter = Square_Footage, ar = House_Price)
house <- house %>%
mutate(negyzetmeterar = ar/negyzetmeter)
hist(house$negyzetmeterar)
#sűrjünk egy új adatbázisba a 250 négyzetméterár alatti lakásokat
house_szurt <- house %>%
filter(negyzetmeterar<250)
mba_selected <- mba %>%
select(Gender,Result10)
#új adatbázisba mentsük ki, hogy nememnként mekkora az átlagos eredmény (result10)
# group_by: csoportosításra jó (nem szerint)
# summarise: a többi változó összetömmörítése
mba_nemenkent <- mba_selected %>%
group_by(Gender) %>%
summarze(mean(Result10))
#új adatbázisba mentsük ki, hogy nememnként mekkora az átlagos eredmény (result10)
# group_by: csoportosításra jó (nem szerint)
# summarise: a többi változó összetömmörítése
mba_nemenkent <- mba_selected %>%
group_by(Gender) %>%
summarize(mean(Result10))
mba_selected2 <- mba %>%
select(Gender, Result10, Result12) %>%
group_by(Gender) %>%
summarize(Result10), max(Result12))
mba_selected2 <- mba %>%
select(Gender, Result10, Result12) %>%
group_by(Gender) %>%
summarize(mean(Result10), max(Result12))
ggplot(house) +
aes(x = negyzetmeter, y = ar) +
geom_point(colour = "blue") +
theme_minimal()
ggplot(house_data) +
aes(x =negyzetmeter, y = ar) +
geom_point(colour = "lightblue") +
labs(
x = "Alapterület (négyzetméter)",
y = "Ár",
title = "Alapterület és ár közti kapcsolat"
) +
theme_light() +
theme(
plot.title = element_text(size = 14L,
face = "bold",
hjust = 0.5)
) +
geom_smooth(method = "lm", colour = "red", size = 0.8)
ggplot(house) +
aes(x =negyzetmeter, y = ar) +
geom_point(colour = "lightblue") +
labs(
x = "Alapterület (négyzetméter)",
y = "Ár",
title = "Alapterület és ár közti kapcsolat"
) +
theme_light() +
theme(
plot.title = element_text(size = 14L,
face = "bold",
hjust = 0.5)
) +
geom_smooth(method = "lm", colour = "red", size = 0.8)
esquisse::esquisser()
#esquisse::esquisser() ezt hol tudom kimásolni?
esquisse::esquisser()
esquisse::esquisser()
library(ggplot2)
ggplot(mba) +
aes(x = Gender, y = MBA) +
geom_boxplot(fill = "#FF761A") +
theme_bw()
aggregated_data$guestreviewsrating <- gsub(" /5", "", aggregated_data$guestreviewsrating)
#1. A setwd paranccsal kijelölöm a mappa helyét, ahonnan el tudom érni az adatfájlokat és ahová el tudom menteni az eredményfájlokat az adattisztítás elvégzése után.
setwd("~/Documents/Documents - betts’s MacBook Air/rajk/kurzusok/2.félév/ökonometria/hf - 1")
#2. Különböző packagek betöltése, amik szükségesek lesznek a feladat során, hogy adott parancsokat elő tudjak hívni.
library(tidyverse)
library(naniar)
#4 Az adatfájl betöltése R-be amivel dolgozni fogok a feladat során
hotels_data <- read.csv("hotelbookingdata.csv")
#1. Az adatok leszűréséhez a "filter" parancsot használtam, amely a hotels_data adattáblából leszűri azokat az adatsorokat, amelyek kifejezetten a Berlin-i hotelekre vonatkoznak. Ezeknek az adatoknak létrehoztam egy új adattáblát - filtered_data néven.
filtered_data <- hotels_data %>%
filter(city_actual == "Berlin")
#1. Ahhoz, hogy lássam az összes oszlopnevet és eldöntsem melyeket kéne átnevezzem, hogy logikusabb legyen számomra az elnevezés, a "colnames" paranccsal összegyűjtöm őket.
colnames(filtered_data)
#2. Számomra nem volt egyértelmű 3 oszlopnak az elnevezése, így a center1distance & center2label & center2distance oszlopokat átnevezetem, citicenter_distance & sightname & sight_distance nevű oszlopokra.
filtered_data <- filtered_data %>% mutate(citycenter_distance = as.factor(center1distance))
filtered_data<- filtered_data %>% mutate(sightname = as.factor(center2label))
filtered_data <- filtered_data %>% mutate(sight_distance = as.factor(center2distance))
#1. Létrehozok egy olyan adattáblát, amelyben csak a city_actual és s_city oszlopok szerepelnek, hogy megpróbáljam bebizonyítani a hipotézisem. Az oszlopok kiemelését a "select" paranccsal fogom véghezvinni.
hypothesis <- filtered_data %>%
select(city_actual, s_city)
#2. Az "identical" paranncsal megnézem, hogy a két oszlopomban megegyeznek-e az értékek és azonos sorrendben vannak-e. Ha lefuttatás után "TRUE" értéket kapok, akkor a két tábla megegyezik egymással.
identical(hypothesis$city_actual, hypothesis$s_city)
#3. Ha "FALSE" értéket kaptam volna, akkor "which" paranccsal meg tudtam volna nézni, hogy mely értékek nem egyeznek. De mivel megegyezett a két oszlop, ezért most ezt a parancsot nem hajtom végre.
#elteres <- which(hypothesis$city_actual != hypothesis$s_city)
#print(elteres)
#3. A "select" paranccsal kiválasztom azokat az oszlopokat, amelyek szükségesek és új sorrendbe rakom őket.
aggregated_data <- filtered_data %>%
select(addresscountryname, city_actual, neighbourhood, hotel_id, price, price_night, accommodationtype, citycenter_distance, sightname, sight_distance, offer, starrating, guestreviewsrating, rating_reviewcount, rating2_ta, rating2_ta_reviewcount, scarce_room, offer, offer_cat, year, month, weekend, holiday)
#4. Az adatok vizsgálata közben kijött, hogy az accommodationtype oszlop változó értékeinek elnevezése nem rögtön egyértelmű, így a "unique" paranccsal összegyűjtöm az összes változót az oszlopban, hogy könnyebben át tudjam nevezni őket.
accommodationtype <- unique(aggregated_data$accommodationtype)
print(accommodationtype)
#5. A 7 változómat leegyszerűsítés miatt "recode" paranccsal átnevezem.
aggregated_data$accommodationtype <- recode(aggregated_data$accommodationtype,
"_ACCOM_TYPE@Hotel" = "Hotel",
"_ACCOM_TYPE@Apart-hotel" = "Apart-hotel",
"_ACCOM_TYPE@Guest House" = "Guest House",
"_ACCOM_TYPE@Motel"   = " Motel",
"_ACCOM_TYPE@Pension"  = "Pension",
"_ACCOM_TYPE@Hostel" = "Hostel",
"_ACCOM_TYPE@Apartment" = "Apartment",)
#6. 4 változó esetén az is felmerült, hogy az az értékek nem numerikusak, mivel a számok mögött szöveg is található, így ezeknél a "gsub" paranccsal kiszedem a szövegeket és numerikussá vektorrá alakítom. A 4 oszlop amelyben változásokat fogok bevezetni a citycenter_distance & sight_distance & guestreviewsrating & offer_cat.
aggregated_data$citycenter_distance <- gsub(" miles| mile", "", aggregated_data$citycenter_distance)
aggregated_data$citycenter_distance <- as.numeric(aggregated_data$citycenter_distance)
aggregated_data$sight_distance <- gsub(" miles| mile", "", aggregated_data$sight_distance)
aggregated_data$sight_distance <- as.numeric(aggregated_data$sight_distance)
aggregated_data$guestreviewsrating <- gsub(" /5", "", aggregated_data$guestreviewsrating)
guestreviewsrating <- unique(aggregated_data$guestreviewsrating)
print(guestreviewsrating)
#Megjegyzés, valamiért nem tudtam a guestreviewsrating oszlopot numerikussá alakítani. Az alábbi üzenetet kaptam: Warning: NAs introduced by coercion.
aggregated_data$guestreviewsrating <- as.numeric(aggregated_data$guestreviewsrating)
aggregated_data$offer_cat <- gsub(" offer| no offer", "", aggregated_data$offer_cat)
#3. Megnézem, hogy a oszlopok milyen típusként vannak az adattáblában és ha kell javítok/kicserélem az értelmezésüket. Pl.: Ha egy numerikus változós oszlop karakter típusú, akkor numerikussá változtatom.
str(aggregated_data)
#4. Megnézem, hogy a változók milyen értékeket vehetnek fel és ha van megkötés, akkor azt is ellenőrzöm, hogy az értékek eleget tesznek-e a megkötéseknek. Az összes oszlopot a "summary" paranccsal ellenőrzöm.
summary(aggregated_data)
#Az offer oszlop esetén csak 0 és 1 értékek lehetnek, mivel a változó azt jelöli, hogy van-e ajánlat a szállodában vagy sem. 0 - nincs és 1 - van és a summary alapján megfelelnek az értékek. A scarce_room és holiday is hasonló.
#A starrating oszlop esetén 1-5-s skálán mozoghatnak az értékek. Az összegzés alapján az értékek megfelelnek ennek a kritériumnak, mivel a minimum értékként az 1-t és maximum értékként at 5-t emelte ki. A rating2_ta is hasonló ehhez.
#1. "is.na" paranccsal megnézem, hogy mely adatok hiányosak, viszont nem szeretném, hogy mind a 4333 megfigyelést egyesével leírja nekem, így az "any" paranccsal csak azt tudom meg hogy van-e hiányzó adat vagy sem. "TRUE" esetén van hiányzó adat, "FALSE" esertén minden adatunk megvan.
any(is.na(aggregated_data))
#Mivel "TRUE" értéket kaptam, ezért van hiányzó adat az adattáblában
#2. A "colSums" paranccsal összegyűjtöm melyik oszlopban vannak hiányzó adatok és mennyi.
colSums(is.na(aggregated_data))
#4 oszlopban is van hiányzó adatom, de mivel nem tudom az adatgyűjtés/adattisztítás célját, ezért ezeket a megfigyeléseket benne hagyom a táblában.
#1. Az adattáblában lévő adatokről a "summary" paranccsal összefoglalok alapvető tudnivalókat.
summary(aggregated_data)
#2. A "colSums(is.na)" paranccsal a hiányzó értékeket tudom ellenőrizni.
colSums(is.na(aggregated_data))
View(aggregated_data)
setwd("~/Documents/Documents - betts’s MacBook Air/rajk/kurzusok/2.félév/ökonometria/hf - 2")
library(tidyverse)
hotel_data <- read.csv("hotelbookingdata.csv")
hotels_data <- read.csv("hotelbookingdata.csv")
setwd("~/Documents/Documents - betts’s MacBook Air/rajk/kurzusok/2.félév/ökonometria/hf - 2")
library(tidyverse)
hotels_data <- read.csv("hotelbookingdata.csv")
print(unique(hotels_data$addresscountryname))
df %>%
filter(addresscountryname == "eSweden") %>%
pull(city_actual) %>%
unique() %>%
print()
df %>%
filter(addresscountryname == "Sweden") %>%
pull(city_actual) %>%
unique() %>%
print()
library(dplyr)
df %>%
filter(addresscountryname == "Sweden") %>%
pull(city_actual) %>%
unique() %>%
print()
df %>%
filter(addresscountryname == "Sweden") %>%
pull(city_actual) %>%
unique() %>%
print()
df %>%
filter(addresscountryname == "Sweden") %>%
pull(city_actual) %>%
unique() %>%
print()
hotels_data %>%
filter(addresscountryname == "Sweden") %>%
pull(city_actual) %>%
unique() %>%
print()
stockholm_data <- hotels_data %>%
filter(city_actual == "Stockholm")
stockholm_data <- stockholm_data %>% mutate(citycenter_distance = as.factor(center1distance))
stockholm_data<- stockholm_data %>% mutate(sightname = as.factor(center2label))
stockholm_data <- stockholm_data %>% mutate(sight_distance = as.factor(center2distance))
stockholm_data <- hotels_data %>%
filter(city_actual == "Stockholm")
stockholm_data <- stockholm_data %>% rename(citycenter_distance = as.factor(center1distance))
stockholm_data <- stockholm_data %>%
rename(citycenter_distance = center1distance) %>%
rename(sightname = center2label) %>%
rename(sight_distance = center2distance)
stockholm_data <- stockholm_data %>%
rename(citycenter_distance = center1distance) %>%
rename(sightname = center2label) %>%
rename(sight_distance = center2distance)
identical(hypothesis$city_actual, hypothesis$s_city)
identical(stockholm_data$city_actual, stockholm_data$s_city)
stockholm_data <- stockholm_data %>%
select(addresscountryname, city_actual, neighbourhood, hotel_id, price, price_night, accommodationtype, citycenter_distance, sightname, sight_distance, offer, starrating, guestreviewsrating, rating_reviewcount, rating2_ta, rating2_ta_reviewcount, scarce_room, offer, offer_cat, year, month, weekend, holiday)
print(unique(aggregated_data$accommodationtype))
print(unique(stockholm_data$accommodationtype))
aggregated_data$accommodationtype <- recode(aggregated_data$accommodationtype,
"_ACCOM_TYPE@Hotel" = "Hotel",
"_ACCOM_TYPE@Apart-hotel" = "Apart-hotel",
"_ACCOM_TYPE@Guest House" = "Guest House",
"_ACCOM_TYPE@Bed and breakfast"   = "Bed and breakfast",
"_ACCOM_TYPE@House boat"  = "House boat",
"_ACCOM_TYPE@Hostel" = "Hostel",
"_ACCOM_TYPE@Apartment" = "Apartment",)
stockholm_data$accommodationtype <- recode(stockholm_data$accommodationtype,
"_ACCOM_TYPE@Hotel" = "Hotel",
"_ACCOM_TYPE@Apart-hotel" = "Apart-hotel",
"_ACCOM_TYPE@Guest House" = "Guest House",
"_ACCOM_TYPE@Bed and breakfast"   = "Bed and breakfast",
"_ACCOM_TYPE@House boat"  = "House boat",
"_ACCOM_TYPE@Hostel" = "Hostel",
"_ACCOM_TYPE@Apartment" = "Apartment",)
stockholm_data$citycenter_distance <- gsub(" miles| mile", "", stockholm_data$citycenter_distance)
stockholm_data$citycenter_distance <- as.numeric(stockholm_data$citycenter_distance)
stockholm_data$sight_distance <- gsub(" miles| mile", "", stockholm_data$sight_distance)
stockholm_data$sight_distance <- as.numeric(stockholm_data$sight_distance)
stockholm_data$guestreviewsrating <- gsub(" /5", "", stockholm_data$guestreviewsrating)
stockholm_data$guestreviewsrating <- as.numeric(stockholm_data$guestreviewsrating)
aggregated_data$offer_cat <- gsub(" offer| no offer", "", aggregated_data$offer_cat)
stockholm_data$offer_cat <- gsub(" offer| no offer", "", stockholm_data$offer_cat)
str(stockholm_data)
stockholm_data$hotel_id <- as.factor(stockholm_data$hotel_id)
str(stockholm_data)
library(tidyverse)
library(dplyr)
library(scales)
library(xtable)
library(modelsummary)
library(ggplot2)
hotel_stockholm <- stockholm_data %>% filter(acc_type=="Hotel")
hotel_stockholm <- stockholm_data %>% filter(accommodationtype=="Hotel")
stars_freq_Stockholm <- ggplot(stockholm_data, aes(stars)) +
geom_bar(color="black", fill="white") +
labs(x="Csillagos értékelés (csillagok száma)", y="Gyakoriság") +
geom_text(stat='count', aes(label=..count..), vjust=-0.5) +
scale_x_continuous(breaks = seq(1, 5, by = 0.5)) +
ylim(0, 150)
stars_freq_Stockholm
table(hotel_stockholm$stars)
stars_freq_Vienna <- ggplot(hotels_cut, aes(x=stars)) +
geom_histogram()
stars_freq_Vienna <- ggplot(hotel_stockholm, aes(x=stars)) +
geom_histogram()
stars_freq_Vienna
table(hotel_stockholm$stars)
stars_freq_Stockholm <- ggplot(hotel_stockholm, aes(x=stars)) +
geom_histogram()
stars_freq_Stockholm
stars_freq_Stockholm <- ggplot(hotel_stockholm, aes(stars)) +
geom_bar()
stars_freq_Stockholm
stars_freq_Stockholm <- ggplot(stockholm_data, aes(stars)) +
geom_bar(color="black", fill="white") +
labs(x="Csillagos értékelés (csillagok száma)", y="Gyakoriság") +
geom_text(stat='count', aes(label=..count..), vjust=-0.5) +
scale_x_continuous(breaks = seq(1, 5, by = 0.5)) +
ylim(0, 150)
stars_freq_Stockholm
table(hotel_stockholm$starrating)
starrating_freq_Stockholm <- ggplot(hotel_stockholm, aes(x=starrating)) +
geom_histogram()
starrating_freq_Stockholm
starrating_freq_Stockholm <- ggplot(hotel_stockholm, aes(starrating)) +
geom_bar()
starrating_freq_Stockholm
starrating_freq_Stockholm <- ggplot(stockholm_data, aes(starrating)) +
geom_bar(color="black", fill="white") +
labs(x="Csillagos értékelés (csillagok száma)", y="Gyakoriság") +
geom_text(stat='count', aes(label=..count..), vjust=-0.5) +
scale_x_continuous(breaks = seq(1, 5, by = 0.5)) +
ylim(0, 150)
starrating_freq_Stockholm
starrating_freq_Stockholm <- ggplot(stockholm_data, aes(starrating)) +
geom_bar(color="brown", fill="white") +
labs(x="Csillagos értékelés (csillagok száma)", y="Gyakoriság") +
geom_text(stat='count', aes(label=..count..), vjust=-0.5) +
scale_x_continuous(breaks = seq(1, 5, by = 0.5)) +
ylim(0, 150)
starrating_freq_Stockholm
light_brown <- rgb(210, 180, 140, maxColorValue = 255)
starrating_freq_Stockholm <- ggplot(stockholm_data, aes(starrating)) +
geom_bar(color="brown", fill="light_brown") +
labs(x="Csillagos értékelés (csillagok száma)", y="Gyakoriság") +
geom_text(stat='count', aes(label=..count..), vjust=-0.5) +
scale_x_continuous(breaks = seq(1, 5, by = 0.5)) +
ylim(0, 150)
starrating_freq_Stockholm
starrating_freq_Stockholm <- ggplot(stockholm_data, aes(starrating)) +
geom_bar(color="brown", fill="#D2B48C") +
labs(x="Csillagos értékelés (csillagok száma)", y="Gyakoriság") +
geom_text(stat='count', aes(label=..count..), vjust=-0.5) +
scale_x_continuous(breaks = seq(1, 5, by = 0.5)) +
ylim(0, 150)
starrating_freq_Stockholm
ggplot(paris_hotels, aes(x = Price)) +
geom_histogram(binwidth = 10, fill = "#D2B48C", color = "brown") +
labs(title = "Ár eloszlása Stockholm hotelei között", x = "Ár (EUR)", y = "Gyakoriság")
ggplot(hotel_stockholm, aes(x = Price)) +
geom_histogram(binwidth = 10, fill = "#D2B48C", color = "brown") +
labs(title = "Ár eloszlása Stockholm hotelei között", x = "Ár (EUR)", y = "Gyakoriság")
ggplot(hotel_stockholm, aes(x = price)) +
geom_histogram(binwidth = 10, fill = "#D2B48C", color = "brown") +
labs(title = "Ár eloszlása Stockholm hotelei között", x = "Ár (EUR)", y = "Gyakoriság")
ggplot(hotel_stockholm, aes(x = price)) +
geom_histogram(binwidth = 20, fill = "#D2B48C", color = "brown") +
labs(title = "Ár eloszlása Stockholm hotelei között", x = "Ár (EUR)", y = "Gyakoriság")
ggplot(hotel_stockholm, aes(x = citycenter_distance)) +
geom_histogram(binwidth = 0.5, fill = "#D2B48C", color = "#990F02") +
labs(title = "Távolság eloszlása Párizs hotelei között", x = "Távolság (km)", y = "Gyakoriság")
ggplot(hotel_stockholm, aes(x = citycenter_distance)) +
geom_histogram(binwidth = 0.5, fill = "#D2B48C", color = "#990F02") +
labs(title = "Távolság eloszlása Stockholm hotelei között", x = "Távolság (km)", y = "Gyakoriság")
summary(hotel_stockholm$price)
summary(hotel_stockholm$citycenter_distance)
var(hotel_stockholm$price)
sd(hotel_stockholm$price)
histprice
str(stockholm_data)
any(is.na(aggregated_data))
View(starrating_freq_Stockholm)
setwd("~/Documents/Documents - betts’s MacBook Air/rajk/kurzusok/2.félév/ökonometria/hf - 2")
library(tidyverse)
library(dplyr)
library(scales)
library(xtable)
library(modelsummary)
library(ggplot2)
hotels_data <- read.csv("hotelbookingdata.csv")
print(unique(hotels_data$addresscountryname))
hotels_data %>%
filter(addresscountryname == "Sweden") %>%
pull(city_actual) %>%
unique() %>%
print()
stockholm_data <- hotels_data %>%
filter(city_actual == "Stockholm")
stockholm_data <- stockholm_data %>%
rename(citycenter_distance = center1distance) %>%
rename(sightname = center2label) %>%
rename(sight_distance = center2distance)
identical(stockholm_data$city_actual, stockholm_data$s_city)
stockholm_data <- stockholm_data %>%
select(addresscountryname, city_actual, neighbourhood, hotel_id, price, price_night, accommodationtype, citycenter_distance, sightname, sight_distance, offer, starrating, guestreviewsrating, rating_reviewcount, rating2_ta, rating2_ta_reviewcount, scarce_room, offer, offer_cat, year, month, weekend, holiday)
print(unique(stockholm_data$accommodationtype))
stockholm_data$accommodationtype <- recode(stockholm_data$accommodationtype,
"_ACCOM_TYPE@Hotel" = "Hotel",
"_ACCOM_TYPE@Apart-hotel" = "Apart-hotel",
"_ACCOM_TYPE@Guest House" = "Guest House",
"_ACCOM_TYPE@Bed and breakfast"   = "Bed and breakfast",
"_ACCOM_TYPE@House boat"  = "House boat",
"_ACCOM_TYPE@Hostel" = "Hostel",
"_ACCOM_TYPE@Apartment" = "Apartment",)
stockholm_data$citycenter_distance <- gsub(" miles| mile", "", stockholm_data$citycenter_distance)
stockholm_data$citycenter_distance <- as.numeric(stockholm_data$citycenter_distance)
stockholm_data$sight_distance <- gsub(" miles| mile", "", stockholm_data$sight_distance)
stockholm_data$sight_distance <- as.numeric(stockholm_data$sight_distance)
stockholm_data$guestreviewsrating <- gsub(" /5", "", stockholm_data$guestreviewsrating)
stockholm_data$guestreviewsrating <- as.numeric(stockholm_data$guestreviewsrating)
stockholm_data$offer_cat <- gsub(" offer| no offer", "", stockholm_data$offer_cat)
str(stockholm_data)
stockholm_data$hotel_id <- as.factor(stockholm_data$hotel_id)
any(is.na(aggregated_data))
stockholm_data <- stockholm_data %>%
rename(citycenter_distance = center1distance) %>%
rename(sightname = center2label) %>%
rename(sight_distance = center2distance)
stockholm_data$hotel_id <- as.factor(stockholm_data$hotel_id)
any(is.na(stockholm_data))
colSums(is.na(stockholm_data))
hotel_stockholm <- stockholm_data %>% filter(accommodationtype=="Hotel")
ggplot(hotel_stockholm, aes(x = price)) +
geom_histogram(binwidth = 20, fill = "#D2B48C", color = "brown") +
labs(title = "Ár eloszlása Stockholm hotelei között", x = "Ár (EUR)", y = "Gyakoriság")
ggplot(hotel_stockholm, aes(x = citycenter_distance)) +
geom_histogram(binwidth = 0.5, fill = "#D2B48C", color = "#990F02") +
labs(title = "Távolság eloszlása Stockholm hotelei között", x = "Távolság (km)", y = "Gyakoriság")
```
summary(hotel_stockholm$price)
summary(hotel_stockholm$citycenter_distance)
var(hotel_stockholm$price)
sd(hotel_stockholm$price)
install.packages("ggthemes")
library(ggthemes)
#install.packages("ggthemes")
install.packages("extrafont")
library(extrafont)
#install.packages("ggthemes")
install.packages("extrafont")
ggplot(hotel_stockholm, aes(x = price)) +
geom_histogram(binwidth = 20, fill = "#D2B48C", color = "brown") +
labs(title = "Ár eloszlása Stockholm hotelei között", x = "Ár (EUR)", y = "Gyakoriság")
ggplot(hotel_stockholm, aes(x = citycenter_distance)) +
geom_histogram(binwidth = 0.5, fill = "#D2B48C", color = "#990F02") +
labs(title = "Távolság eloszlása Stockholm hotelei között", x = "Távolság (km)", y = "Gyakoriság")
ggplot(hotel_stockholm, aes(x = price)) +
geom_histogram(binwidth = 20, fill = "#D2B48C", color = "brown") +
labs(title = "Ár eloszlása Stockholm hotelei között", x = "Ár (EUR)", y = "Gyakoriság") +
theme_fivethirtyeight()
font_import()
font_import()
rm(list = ls())
dev.off()  # Bezárja a grafikai eszközt
